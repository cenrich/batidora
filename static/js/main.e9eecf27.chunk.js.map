{"version":3,"sources":["components/Input.js","components/Item.js","components/List.js","containers/Home.js","AppRouter.js","serviceWorker.js","index.js"],"names":["Input","value","onInputChange","results","TextField","label","onChange","e","color","variant","margin","fullWidth","Item","image","title","content","Card","className","CardMedia","CardContent","Typography","gutterBottom","component","List","map","strDrinkThumb","strDrink","strInstructions","Home","state","searchInput","searchResults","handleSearchInput","query","target","setState","length","fetch","then","res","json","drinks","this","Component","AppRouter","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAiBeA,EAdD,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,cAA4B,EAAbC,QACnC,OACI,kBAACC,EAAA,EAAD,CACIC,MAAM,iCACNJ,MAAOA,EACPK,SAAU,SAACC,GAAD,OAAKL,EAAcK,IAC7BC,MAAM,YACNC,QAAQ,WACRC,OAAO,QACPC,WAAW,K,gCCsBRC,EA9BF,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAC1B,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,QACZ,kBAACC,EAAA,EAAD,CAAWL,MAAOA,EAAOI,UAAU,eAC/B,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACZ,QAAQ,KAAKa,UAAU,MAC3CR,GAEL,kBAACM,EAAA,EAAD,CACIX,QAAQ,QACRD,MAAM,gBACNc,UAAU,IACVL,UAAU,SACLF,MCCdQ,EAfF,SAAC,GAAe,IAAdpB,EAAa,EAAbA,QACX,OACI,yBAAKc,UAAU,QACVd,GACGA,EAAQqB,KAAI,SAACjB,GAAD,OACR,kBAAC,EAAD,CACIM,MAAON,EAAEkB,cACTX,MAAOP,EAAEmB,SACTX,QAASR,EAAEoB,uBCkBpBC,E,2MAxBbC,MAAQ,CACRC,YAAa,GACbC,cAAe,I,EAGfC,kBAAoB,SAACzB,GACrB,IAAI0B,EAAQ1B,EAAE2B,OAAOjC,MACrB,EAAKkC,SAAS,CAAEL,YAAaG,IACzB,EAAKJ,MAAMC,YAAYM,QAAU,GACpCC,MAAM,4DAAD,OAA6DJ,IAChEK,MAAK,SAACC,GAAD,OAASA,EAAIC,UACdF,MAAK,SAACC,GAAD,OAAS,EAAKJ,SAAS,CAAEJ,cAAeQ,EAAIE,a,wEAKtD,OACI,yBAAKxB,UAAU,aACb,kBAAC,EAAD,CAAOhB,MAAOyC,KAAKb,MAAMC,YAAa5B,cAAewC,KAAKV,oBAC1D,kBAAC,EAAD,CAAM7B,QAASuC,KAAKb,MAAME,qB,GApBjBY,a,gBCMJC,EANG,kBACjB,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKxB,UAAWM,M,YCMjBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.e9eecf27.chunk.js","sourcesContent":["import React from 'react'\r\nimport { TextField } from '@material-ui/core'\r\n\r\nconst Input = ({ value, onInputChange, results }) =>{\r\n    return (\r\n        <TextField  \r\n            label='buscá tu cóctel favorito' \r\n            value={value}\r\n            onChange={(e)=>onInputChange(e)}\r\n            color='secondary'\r\n            variant='outlined'\r\n            margin='dense'\r\n            fullWidth={true}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Input","import React from 'react'\r\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Item = ({ image, title, content }) =>{\r\n    return (\r\n        <Card className='item'>\r\n            <CardMedia image={image} className='item-image'/>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant='h5' component='h2'>\r\n                        {title}\r\n                    </Typography>\r\n                    <Typography \r\n                        variant='body2' \r\n                        color='textSecondary' \r\n                        component='p' \r\n                        className='body2'>\r\n                            {content}\r\n                    </Typography>\r\n                </CardContent>\r\n        </Card>\r\n    )\r\n\r\n    Item.propTypes = {\r\n        image:PropTypes.string,\r\n        title:PropTypes.string.isRequired,\r\n        content:PropTypes.string.isRequired\r\n    }\r\n    \r\n    Item.defaultTypes = {\r\n        image:'No hay imagen disponible'\r\n    }\r\n}\r\n\r\nexport default Item","import React from 'react'\r\nimport Item from './Item'\r\n\r\nconst List = ({results}) => {\r\n    return (\r\n        <div className='grid'>\r\n            {results &&\r\n                results.map((e) => (\r\n                    <Item\r\n                        image={e.strDrinkThumb}\r\n                        title={e.strDrink}\r\n                        content={e.strInstructions} \r\n                    />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List","import React, { Component } from 'react'\nimport Input from '../components/Input'\nimport List from '../components/List'\n\nclass Home extends Component  {\n  state = {\n\t\tsearchInput: '',\n\t\tsearchResults: [],\n\t}\n\n  handleSearchInput = (e) => {\n\t\tlet query = e.target.value\n\t\tthis.setState({ searchInput: query })\n\t\tif (this.state.searchInput.length >= 3) {\n\t\t\tfetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${query}`)\n\t\t\t\t.then((res) => res.json())\n        .then((res) => this.setState({ searchResults: res.drinks }))\n      }\n    }\n   \n  render() {\n    return (\n        <div className='container'>\n          <Input value={this.state.searchInput} onInputChange={this.handleSearchInput} />       \n          <List results={this.state.searchResults} />\n        </div>\n  )}\n}\n\nexport default Home;","import React from 'react'\r\nimport Home from './containers/Home'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\n\r\nconst AppRouter = () => (\r\n\t<Router>\r\n\t\t<Route exact path={'/'} component={Home} />\r\n\t</Router>\r\n)\r\n\r\nexport default AppRouter","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppRouter from './AppRouter'\nimport './styles.scss'\nimport 'normalize.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}